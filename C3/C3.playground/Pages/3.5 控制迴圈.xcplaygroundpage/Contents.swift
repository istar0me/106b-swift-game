/*:
 # 3.5 控制迴圈(Control Flow)
 Swift 提供相當多種的控制迴圈，如 while 迴圈能執行一項任務許多次；if, guard 和 switch 語句則會根據不同的狀況，執行相對應的程式碼；而 break 與 continue 則會將執行流程轉換到程式中的其他位置。
 
 Swift 還有提供一項實用的 for-in 迴圈，讓我們能更簡單地遍歷陣列、字典、範圍與字串。
 */
/*:
 ## 本章節將涵蓋以下內容：
 ### 選擇性結構
 1. if
 2. if-else
 3. switch
 ### 重複性結構
 4. for-in
 5. while
 6. repeat-while
 */
/*:
 ## 做決策（選擇性結構）
 我們能建立一套規則，讓電腦來做判斷。當某些條件成立時，執行指定的指令。
 ### 1. if（如果⋯⋯，就⋯⋯。）
 非常常見的指令，如果條件成立了，就執行甚麼動作。
 #### 語法
 ```
 if 條件 {
    // 條件成立時執行的內容
 }
 ```
 */
var temperature = 35
if temperature > 30 { // 也可改成：if(temperature > 30) {
    print("太熱了")
}
/*:
 > 你可能會困惑，在其他語言中條件左右都要加上括號，為什麼上面的程式遺漏掉了？\
在 Swift 中能自由選擇是否加上括號，若你習慣原本的寫法，加上括號也是可以執行的。
 */
/*:
 ### 2. if-else（如果⋯⋯，就⋯⋯；否則⋯⋯，就⋯⋯。）
 if-else 則是補足 if 的缺漏，當條件沒有成立時，會執行其他的動作。
 #### 語法
 ```
 if 條件 {
    // 條件成立時執行的內容
 } else {
    // 條件沒成立時執行的內容
 }
 ```
 */
temperature = 20
if temperature > 30 {
    print("好熱好熱")
} else {
    print("真舒服 :)")
}
/*:
 ### 3. switch（開關）
 有時候需要判斷的條件不只一個，可能有好幾個。這時候如果用傳統的 if-else 寫法，會讓你的程式碼非常冗長，因此建議你可以使用 switch 語句來讓它更精簡！
 #### 語法
 ```
 switch 被判斷的數值 {
 case 情況1:
    // 符合情況 1 條件時，執行的程式碼
 case 情況2, 情況3:
    // 符合情況 2 或 3 條件時，執行的程式碼
 dafault:
    // 當前面的情況都不符合時，就會執行這段
 ```
 */
temperature = 20
switch temperature {
case ...10, 30...: // 小於 10 度或大於 30 度（有包含10, 30）
    print("真不舒服 :(")
default: // 介於 10~30 度之間（不包含10, 30）
    print("真舒服 :)")
}
//: > swift 中的 switch 不用像其他語言使用 break 跳出
/*:
 ## 源源不絕（重複性結構）
 ### 4. for-in
 如果是有一點程式基礎的人，相信都對 for 迴圈相當熟悉。for 迴圈會先設立初始值，接著判斷是否符合條件，若符合則執行，否則就跳開迴圈。傳統的 for 迴圈雖然也很好用，但 Swift 提供了一種更直覺的語法：for-in
 #### 語法
 ```
 for 項目名稱 in 清單 {
    // 做一些與項目名稱相關的事
 }
 ```
 */
var fruits = ["西瓜", "草莓", "芒果", "榴蓮"]
for fruit in fruits {
    print("我喜歡吃\(fruit)")
}
// 印出：
// 我喜歡吃西瓜
// 我喜歡吃草莓
// 我喜歡吃芒果
// 我喜歡吃榴蓮
/*:
 > 通常會在 for-in 前面用單數(fruit)，後面用複數(fruits)，藉以強調單數是複數形的其中一項
 */
//: 雖然上面說每一項水果都喜歡吃，但現在小朋友都很挑食，讓我們搭配 switch 寫出一個更貼切的程式吧！
for fruit in fruits {
    switch fruit {
    case "西瓜":
        print("\(fruit)太甜了")
    case "草莓":
        print("\(fruit)好酸喔")
    case "榴蓮":
        print("\(fruit)很臭耶")
    default:
    print("好啦，\(fruit)我可以")
    }
}
// 印出：
// 西瓜太甜了
// 草莓好酸喔
// 好啦，芒果我可以
// 榴蓮很臭耶
/*:
 ### 5. while（當⋯⋯的時候）
 #### 語法
 ```
 while 條件 {
    // 條件成立時執行的內容
 }
 ```
 前面我們已經有看過 if 了，你可能會想既然 if 已經能夠做判斷了，那為什麼還需要 while 呢？
 
 答案非常簡單，因為 if 只會判斷一次，但 while 可以一直做判斷。舉個例子，當有人還沒繳班費的時候，總務股長就會不斷地催繳，將上面的語句轉換後會變成：
 */
var 繳班費 = true // 設定此條件避免「無窮迴圈」所造成的當機問題
while !繳班費 {
    //催繳同學並收錢
    print(1)
}
/*:
 因此只有有人未繳班費，總務股長就會不斷催繳。
 > `!`代表相反，`!繳班費`代表未繳班費
 */
//var i = 1
//while (i > 0) {
//  print(i)
//  i = i + 1
//}
//: 但是使用 while 迴圈需注意，像上面的程式並沒有設定跳出的條件，會造成迴圈不斷執行，這種情況稱作「無窮迴圈」。
//: > 千萬不要將上面的註解移除，無窮迴圈可能會造成當機等問題
/*:
 ### 6. repeat-while
 類似於其他語言的 `do-while`，與 `while` 迴圈不同的是，他會先執行一次區塊內的程式碼，再開始做 `while` 的判斷。
 ### 語法
 ```
 repeat {
    // 不論下面條件是否成立，都先執行這區塊的程式碼
 } while 條件
 ```
 */
var j=1
repeat {
    print("j=\(j)")
} while j<0
//: 可以看到雖然一開始 j=1 並不符合 j<0 的條件，但由於他是 `repeat-while` 迴圈，因此還是會先列印一次

//: [上一頁](@previous)
